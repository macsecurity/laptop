#!/bin/bash

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\\n$fmt\\n" "$@"
}

append_to_file() {
  local file="$1"
  local text="$2"

  if ! grep -qs "^$text$" "$file"; then
    printf "\\n%s\\n" "$text" >> "$file"
  fi
}

append_to_beginning_of_file() {
  local file="$1"
  local text="$2"

  if ! grep -qs "^$text$" "$file"; then
    echo "$text" | cat - "$file" > temp && mv temp "$file"
  fi
}

create_zshrc_and_set_it_as_shell_file() {
  if [ ! -f "$HOME/.zshrc" ]; then
    touch "$HOME/.zshrc"
  fi

  shell_file="$HOME/.zshrc"
}

create_bash_profile_and_set_it_as_shell_file() {
  if [ ! -f "$HOME/.bash_profile" ]; then
    touch "$HOME/.bash_profile"
  fi

  shell_file="$HOME/.bash_profile"
}

apple_m1() {
  sysctl -n machdep.cpu.brand_string | grep "Apple M1"
}

rosetta() {
  uname -m | grep "x86_64"
}

homebrew_installed_on_m1() {
  apple_m1 && ! rosetta && [ -d "/opt/homebrew" ]
}

homebrew_installed_on_intel() {
  ! apple_m1 && command -v brew >/dev/null
}

install_or_update_homebrew() {
  if homebrew_installed_on_m1 || homebrew_installed_on_intel; then
    update_homebrew
  else
    install_homebrew
  fi
}

install_homebrew() {
  fancy_echo "Installing Homebrew ..."
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

  configure_shell_file_for_homebrew
}

update_homebrew() {
  fancy_echo "Homebrew already installed. Updating Homebrew ..."
  configure_shell_file_for_homebrew
  brew update
}

check_processor_and_set_chruby_source_strings() {
  if apple_m1 && ! rosetta; then
    chruby_source_string="source /opt/homebrew/opt/chruby/share/chruby/chruby.sh"
    auto_source_string="source /opt/homebrew/opt/chruby/share/chruby/auto.sh"
  else
    chruby_source_string="source /usr/local/share/chruby/chruby.sh"
    auto_source_string="source /usr/local/share/chruby/auto.sh"
  fi
}

configure_shell_file_for_homebrew() {
  if apple_m1 && ! rosetta; then
    configure_shell_file_for_homebrew_on_m1
  else
    # shellcheck disable=SC2016
    append_to_file "$shell_file" 'export PATH="/usr/local/bin:$PATH"'
  fi
}

configure_shell_file_for_homebrew_on_m1() {
  # shellcheck disable=SC2016
  append_to_file "$HOME/.zprofile" 'eval $(/opt/homebrew/bin/brew shellenv)'
  eval "$(/opt/homebrew/bin/brew shellenv)"
}

configure_shell_file_for_chruby() {
  append_to_file "$shell_file" "$chruby_source_string"
  append_to_file "$shell_file" "$auto_source_string"

  local ruby_version="$1"
  append_to_file "$shell_file" "chruby ruby-$ruby_version"
}

configure_shell_file_for_nodenv() {
  # shellcheck disable=SC2016
  append_to_file "$shell_file" 'eval "$(nodenv init -)"'
}

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e -o pipefail

case "$SHELL" in
  */zsh) :
    create_zshrc_and_set_it_as_shell_file
    ;;
  */bash)
    create_bash_profile_and_set_it_as_shell_file
    ;;
esac

install_or_update_gem() {
  if gem list "$1" --installed > /dev/null; then
    fancy_echo "Updating %s ..." "$1"
    gem update "$@"
  else
    fancy_echo "Installing %s ..." "$1"
    gem install "$@"
  fi
}

latest_installed_ruby() {
  find "$HOME/.rubies" -maxdepth 1 -name 'ruby-*' -print0 | sort -z | xargs -0 | grep -E -o '\d+\.\d+\.\d+' | tail -n1
}

switch_to_ruby() {
  # shellcheck disable=SC1091
  if apple_m1 && ! rosetta; then
    source /opt/homebrew/opt/chruby/share/chruby/chruby.sh
  else
    source /usr/local/share/chruby/chruby.sh
  fi

  local ruby_version="$1"
  chruby "ruby-$ruby_version"
}

append_to_file "$shell_file" "alias laptop='bash <(curl -s https://raw.githubusercontent.com/monfresh/laptop/master/laptop)'"

fancy_echo 'Welcome to the monfresh laptop script!'
fancy_echo 'You should be and up and running with a working Ruby environment in a few minutes.'

install_or_update_homebrew

fancy_echo "Verifying the Homebrew installation..."
if brew doctor; then
  fancy_echo "Your Homebrew installation is good to go."
else
  fancy_echo "Your Homebrew installation reported some errors or warnings."
  echo "Review the Homebrew messages to see if any action is needed."
fi

if [ -z "${ONLY_RUBY:-}" ]; then
  brewfile="Brewfile"
  echo "Installing everything..."
else
  brewfile="Brewfile.ruby"
fi

fancy_echo "Installing formulas and casks from the Brewfile ..."
if brew bundle --no-lock --file="$brewfile"; then
  fancy_echo "All formulas and casks were installed successfully."
else
  fancy_echo "Some formulas or casks failed to install."
fi

# shellcheck disable=SC2016
append_to_file "$HOME/.gemrc" 'gem: --no-document'

check_processor_and_set_chruby_source_strings

if command -v rbenv >/dev/null || command -v rvm >/dev/null || command -v asdf; then
  fancy_echo 'We recommend chruby and ruby-install over RVM or rbenv.'
  echo "Please completely uninstall RVM, rbenv, or asdf then run this script again."
else
  fancy_echo 'Checking if a newer version of Ruby is available...'

  ruby-install --latest > /dev/null
  latest_stable_ruby="$(cat < "$HOME/.cache/ruby-install/ruby/stable.txt" | tail -n1)"

  if ! [ "$latest_stable_ruby" = "$(latest_installed_ruby)" ]; then
    fancy_echo "Installing latest stable Ruby version: $latest_stable_ruby"
    ruby-install ruby -- --with-openssl-dir="$(brew --prefix openssl@1.1)"
    configure_shell_file_for_chruby "$(latest_installed_ruby)"
    switch_to_ruby "$(latest_installed_ruby)"
  else
    fancy_echo 'You have the latest version of Ruby'
  fi

  configure_shell_file_for_chruby "$(latest_installed_ruby)"
fi

fancy_echo 'Updating Rubygems...'
switch_to_ruby "$(latest_installed_ruby)"
gem update --system --silent

fancy_echo 'Installing or updating Bundler'
install_or_update_gem 'bundler'

fancy_echo "Configuring Bundler ..."
number_of_cores=$(sysctl -n hw.ncpu)
bundle config set --global jobs $((number_of_cores - 1))

if [ -z "${ONLY_RUBY:-}" ]; then
  fancy_echo 'Installing or updating Rails'
  install_or_update_gem 'rails'

  fancy_echo 'Installing or updating Jekyll'
  install_or_update_gem 'jekyll'

  fancy_echo '...Finished Ruby installation checks.'

  fancy_echo "Installing node 16.13.1 ..."
  if nodenv versions | grep -q 16.13.1; then
    fancy_echo "node 16.13.1 already installed."
  else
    brew upgrade node-build
    nodenv install 16.13.1
  fi
  fancy_echo 'Configuring Nodenv...'
  configure_shell_file_for_nodenv

  if [ -f "$HOME/.laptop.local" ] && [ -z "${SKIP_LOCAL:-}" ]; then
    # shellcheck source=/dev/null
    . "$HOME/.laptop.local"
  fi
fi

fancy_echo 'All done!'
fancy_echo 'Now make sure to quit and restart your terminal!'
fancy_echo 'If you found this script valuable, join the 2800+ people on my list'
echo "who are becoming confident coders:"
fancy_echo "https://www.moncefbelyamani.com/newsletter"
echo " "

if [ -z "${SKIP_SURVEY:-}" ]; then
  open https://www.moncefbelyamani.com/post-script-survey/
fi

append_to_file "$shell_file" "# The export SKIP_SURVEY=true line below was added by Moncef's laptop script to avoid showing you the survey more than once."
append_to_file "$shell_file" "export SKIP_SURVEY=true"
